  
/* helper mixin_______________________________ */
cf()
  &:after
    content: ""
    display: table
    clear: both

//footer
footer-stick($f_size) 
  height: auto;
  min-height: 100%;
  padding-bottom: $f_size;
  box-sizing: border-box;
  & + footer 
    margin-top: - $f_size;
    height: $f_size;
    clear: both;
    box-sizing: border-box;


// Triangle______________________________________________________
// triangle(width, height, direction, color)
triangle(width = 10px, height = 10px, direction = 'bottom', color = #000)
  // Base triangle styles
  width 0
  height 0
  background 0
  border-style solid

  // Styles for each direction
  directions = {
    top: {
      border-width: 0 (width * .5) height (width * .5),
      border-color: transparent transparent color transparent
    },
    topRight: {
      border-width: 0 width height 0,
      border-color: transparent color transparent transparent
    },
    right: {
      border-width: (height * .5) 0 (height *.5) width,
      border-color: transparent transparent transparent color
    },
    bottomRight: {
      border-width: 0 0 height width,
      border-color: transparent transparent color transparent
    },
    bottom: {
      border-width: height (width * .5) 0 (width * .5),
      border-color: color transparent transparent transparent
    },
    bottomLeft: {
      border-width: width 0 0 height,
      border-color: transparent transparent transparent color
    },
    left: {
      border-width: (height * .5) width (height * .5) 0,
      border-color: transparent color transparent transparent
    },
    topLeft: {
      border-width: height width 0 0,
      border-color: color transparent transparent transparent
    }
  }

  // Mixin styles for passed direction
  styles = directions[direction]
  {styles}

/*
 * Define background-image as `path` with optional width and height, adding an
 * @2x variant.
 *
 * affected by github.com/LearnBoost/stylus/issues/1050 and
 * github.com/LearnBoost/stylus/issues/1038 ... refactor when those are closed
 */

retina(path, $repeat=no-repeat, w = 100%, h = auto, mpr = 1.5) {
  background-image url(path)
  background-repeat $repeat 

  q = 'all and (-webkit-min-device-pixel-ratio:' + mpr + '),'
  q = q + '(min--moz-device-pixel-ratio:' + mpr + '),'
  q = q + '(-o-min-device-pixel-ratio:' + mpr + '/1),'
  q = q + '(min-device-pixel-ratio:' + mpr + '),'
  q = q + '(min-resolution:' + unit(mpr*96, dpi) + '),'
  q = q + '(min-resolution:' + unit(mpr, dppx) + ')'

  @media q {

    ext = extname(path)
    path = dirname(path) + '/' + basename(path, ext) + '@2x' + ext

    background-image url(path)

    if w in (cover contain) and h == auto {
      h == null
    }
    background-size w h
  }
}

/*Placeholder_____________________________________________________________*/
placeholder(color = #ccc) 
  &:-moz-placeholder
    color: color
    {block}
  &::-moz-placeholder
    color: color
    {block}
  &:-ms-input-placeholder
    color: color;
    {block}
  &::-webkit-input-placeholder
    color: color
    {block}


/*Font___________________________________________*/
// Fonts mixin
font-url(file)
  return '../fonts/' + file
 
webfont(family, file, weight = normal, style= normal)
  @font-face
    font-family family
    src url(font-url(file + '.eot'))
    src url(font-url(file + '.eot?#iefix')) format('embedded-opentype'),
        url(font-url(file + '.woff')) format('woff'), 
        url(font-url(file + '.otf')) format('truetype'), 
        url(font-url(file + '.ttf')) format('truetype') 
    font-weight weight
    font-style style
    
